/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$===', '$raise', '$type_error', '$to_f', '$log', '$include']);
  return (function($base) {
    var self = $module($base, 'Math');

    var def = self._proto, $scope = self._scope, $a;

    (function($base, $super) {
      function $DomainError(){};
      var self = $DomainError = $klass($base, $super, 'DomainError', $DomainError);

      var def = self._proto, $scope = self._scope, TMP_1;

      return ($opal.defs(self, '$new', TMP_1 = function(method) {
        var self = this, $iter = TMP_1._p, $yield = $iter || nil;

        TMP_1._p = null;
        return $opal.find_super_dispatcher(self, 'new', TMP_1, null, $DomainError).apply(self, ["Numerical argument is out of domain - \"" + (method) + "\""]);
      }), nil) && 'new'
    })(self, (($a = $scope.StandardError) == null ? $opal.cm('StandardError') : $a));

    $opal.cdecl($scope, 'E', Math.E);

    $opal.cdecl($scope, 'PI', Math.PI);

    def.$acos = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      x = x.$to_f();

      if (x < -1 || x > 1) {
        self.$raise((($a = $scope.DomainError) == null ? $opal.cm('DomainError') : $a), "acos");
      }

      return Math.acos(x);
    ;
    };

    if ((($a = (typeof(Math.acosh) !== "undefined")) !== nil && (!$a._isBoolean || $a == true))) {
      } else {
      
      Math.acosh = function(x) {
        return Math.log(x + Math.sqrt(x * x - 1));
      }
    
    };

    def.$acosh = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      return Math.acosh(x.$to_f());
    ;
    };

    def.$asin = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      x = x.$to_f();

      if (x < -1 || x > 1) {
        self.$raise((($a = $scope.DomainError) == null ? $opal.cm('DomainError') : $a), "asin");
      }

      return Math.asin(x);
    ;
    };

    if ((($a = (typeof(Math.asinh) !== "undefined")) !== nil && (!$a._isBoolean || $a == true))) {
      } else {
      
      Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(x * x + 1))
      }
    ;
    };

    def.$asinh = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      return Math.asinh(x.$to_f());
    ;
    };

    def.$atan = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      return Math.atan(x.$to_f());
    ;
    };

    def.$atan2 = function(x, y) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](y)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(y, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      return Math.atan2(x.$to_f(), y.$to_f());
    ;
    };

    if ((($a = (typeof(Math.atanh) !== "undefined")) !== nil && (!$a._isBoolean || $a == true))) {
      } else {
      
      Math.atanh = function(x) {
        return 0.5 * Math.log((1 + x) / (1 - x));
      }
    
    };

    def.$atanh = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      x = x.$to_f();

      if (x < -1 || x > 1) {
        self.$raise((($a = $scope.DomainError) == null ? $opal.cm('DomainError') : $a), "atanh");
      }

      return Math.atanh(x);
    ;
    };

    def.$cbrt = function(x) {
      var self = this;

      return Math.cbrt(x);
    };

    def.$cos = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      return Math.cos(x.$to_f());
    ;
    };

    if ((($a = (typeof(Math.cosh) !== "undefined")) !== nil && (!$a._isBoolean || $a == true))) {
      } else {
      
      Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
      }
    
    };

    def.$cosh = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      return Math.cosh(x.$to_f());
    ;
    };

    def.$erf = function(x) {
      var $a, self = this;

      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def.$erfc = function(x) {
      var $a, self = this;

      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def.$exp = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      return Math.exp(x.$to_f());
    ;
    };

    def.$frexp = function(x) {
      var $a, self = this;

      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def.$gamma = function(x) {
      var $a, self = this;

      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    if ((($a = (typeof(Math.hypot) !== "undefined")) !== nil && (!$a._isBoolean || $a == true))) {
      } else {
      
      Math.hypot = function(x, y) {
        return Math.sqrt(x * x + y * y)
      }
    ;
    };

    def.$hypot = function(x, y) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](y)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(y, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      return Math.hypot(x.$to_f(), y.$to_f());
    ;
    };

    def.$ldexp = function(flt, int$) {
      var $a, self = this;

      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def.$lgamma = function(x) {
      var $a, self = this;

      return self.$raise((($a = $scope.NotImplementedError) == null ? $opal.cm('NotImplementedError') : $a));
    };

    def.$log = function(num, base, method) {
      var $a, self = this;

      if (base == null) {
        base = (($a = $scope.E) == null ? $opal.cm('E') : $a)
      }
      if (method == null) {
        method = nil
      }
      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](num)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(num, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](base)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(base, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      num  = num.$to_f();
      base = base.$to_f();

      if (num < 0) {
        self.$raise((($a = $scope.DomainError) == null ? $opal.cm('DomainError') : $a), ((($a = method) !== false && $a !== nil) ? $a : "log"));
      }

      num = Math.log(num);

      if (base != Math.E) {
        num /= Math.log(base);
      }

      return num
    ;
    };

    if ((($a = (typeof(Math.log10) !== "undefined")) !== nil && (!$a._isBoolean || $a == true))) {
      def.$log10 = function(num) {
        var $a, self = this;

        
        if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](num)) {
          self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(num, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
        }

        num = num.$to_f();

        if (num < 0) {
          self.$raise((($a = $scope.DomainError) == null ? $opal.cm('DomainError') : $a), "log2");
        }

        return Math.log10(num);
      ;
      }
      } else {
      def.$log10 = function(num) {
        var self = this;

        return self.$log(num, 10, "log10");
      }
    };

    if ((($a = (typeof(Math.log2) !== "undefined")) !== nil && (!$a._isBoolean || $a == true))) {
      def.$log2 = function(num) {
        var $a, self = this;

        
        if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](num)) {
          self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(num, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
        }

        num = num.$to_f();

        if (num < 0) {
          self.$raise((($a = $scope.DomainError) == null ? $opal.cm('DomainError') : $a), "log2");
        }

        return Math.log2(num);
      ;
      }
      } else {
      def.$log2 = function(num) {
        var self = this;

        return self.$log(num, 2, "log2");
      }
    };

    def.$sin = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      return Math.sin(x.$to_f());
    ;
    };

    if ((($a = (typeof(Math.sinh) !== "undefined")) !== nil && (!$a._isBoolean || $a == true))) {
      } else {
      
      Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
      }
    
    };

    def.$sinh = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      return Math.sinh(x.$to_f());
    ;
    };

    def.$sqrt = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      x = x.$to_f();

      if (x < 0) {
        self.$raise((($a = $scope.DomainError) == null ? $opal.cm('DomainError') : $a), "log2");
      }

      return Math.sqrt(x);
    ;
    };

    def.$tan = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      return Math.tan(x.$to_f());
    ;
    };

    if ((($a = (typeof(Math.tanh) !== "undefined")) !== nil && (!$a._isBoolean || $a == true))) {
      } else {
      
      Math.tanh = function(x) {
        if (x == Infinity) {
          return 1;
        }
        else if (x == -Infinity) {
          return -1;
        }
        else {
          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
        }
      }
    
    };

    def.$tanh = function(x) {
      var $a, self = this;

      
      if (!(($a = $scope.Numeric) == null ? $opal.cm('Numeric') : $a)['$==='](x)) {
        self.$raise((($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$type_error(x, (($a = $scope.Float) == null ? $opal.cm('Float') : $a)));
      }

      return Math.tanh(x.$to_f());
    ;
    };

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$include((($a = $scope.Math) == null ? $opal.cm('Math') : $a))
    })(self.$singleton_class());
        ;$opal.donate(self, ["$acos", "$acosh", "$asin", "$asinh", "$atan", "$atan2", "$atanh", "$cbrt", "$cos", "$cosh", "$erf", "$erfc", "$exp", "$frexp", "$gamma", "$hypot", "$ldexp", "$lgamma", "$log", "$log10", "$log10", "$log2", "$log2", "$sin", "$sinh", "$sqrt", "$tan", "$tanh"]);
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/math.js.map
;
/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$new', '$attr_accessor', '$image', '$display', '$[]', '$-', '$attr_reader', '$pressing?', '$keyboard', '$<', '$+', '$>', '$%', '$image_cropped', '$*', '$floor', '$/', '$class', '$rand', '$width', '$height', '$x', '$y', '$sqrt', '$**', '$size=', '$reset_game', '$length', '$push', '$pressed?', '$!', '$each', '$act', '$is_a?', '$==', '$hit?', '$alive=', '$play', '$hit_sound', '$===', '$max', '$delete_if', '$alive', '$clear', '$fill_color=', '$fill_rectangle', '$size', '$render', '$text_size=', '$fill_text']);
  ;
  return (function($base, $super) {
    function $AppleCatcher(){};
    var self = $AppleCatcher = $klass($base, $super, 'AppleCatcher', $AppleCatcher);

    var def = self._proto, $scope = self._scope, $a;

    def.context = def.player = def.actors = def.play_sound = def.score = def.high_score = def.state = nil;
    $opal.cdecl($scope, 'Context', (($a = $scope.Struct) == null ? $opal.cm('Struct') : $a).$new("display", "keyboard"));

    (function($base, $super) {
      function $Actor(){};
      var self = $Actor = $klass($base, $super, 'Actor', $Actor);

      var def = self._proto, $scope = self._scope;

      def.image = def.x = def.y = nil;
      def.$initialize = function(c) {
        var self = this;

        self.alive = true;
        self.image = nil;
        return self.x = self.y = 0;
      };

      self.$attr_accessor("alive");

      def.$act = function(c) {
        var self = this;

        return nil;
      };

      return (def.$render = function(c) {
        var $a, self = this;

        return c.$display().$image(self.image, (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](self.x, self.y));
      }, nil) && 'render';
    })(self, null);

    (function($base, $super) {
      function $Player(){};
      var self = $Player = $klass($base, $super, 'Player', $Player);

      var def = self._proto, $scope = self._scope, TMP_1;

      def.x = def.anim = def.image = def.y = nil;
      def.$initialize = TMP_1 = function(c) {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_1._p, $yield = $iter || nil;

        TMP_1._p = null;
        $opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
        self.image = (($a = $scope.Image) == null ? $opal.cm('Image') : $a)['$[]']("images/noschar.png");
        self.x = 240;
        self.y = (400)['$-'](32);
        return self.anim = 0;
      };

      self.$attr_reader("x", "y");

      def.$act = function(c) {
        var $a, self = this;

        if ((($a = c.$keyboard()['$pressing?']("left")) !== nil && (!$a._isBoolean || $a == true))) {
          self.x = self.x['$-'](8);
          if (self.x['$<'](-16)) {
            self.x = -16};};
        if ((($a = c.$keyboard()['$pressing?']("right")) !== nil && (!$a._isBoolean || $a == true))) {
          self.x = self.x['$+'](8);
          if (self.x['$>']((640)['$-'](16))) {
            self.x = (640)['$-'](16)};};
        return self.anim = (self.anim['$+'](1))['$%'](40);
      };

      return (def.$render = function(c) {
        var $a, self = this;

        return c.$display().$image_cropped(self.image, (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](self.x, self.y), (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]']((self.anim['$/'](10)).$floor()['$*'](32), 0), (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](32, 32));
      }, nil) && 'render';
    })(self, (($a = $scope.Actor) == null ? $opal.cm('Actor') : $a));

    (function($base, $super) {
      function $Item(){};
      var self = $Item = $klass($base, $super, 'Item', $Item);

      var def = self._proto, $scope = self._scope, TMP_2;

      def.image = def.y = def.v = nil;
      def.$initialize = TMP_2 = function(c) {var $zuper = $slice.call(arguments, 0);
        var self = this, $iter = TMP_2._p, $yield = $iter || nil;

        TMP_2._p = null;
        $opal.find_super_dispatcher(self, 'initialize', TMP_2, $iter).apply(self, $zuper);
        self.image = self.$class().$image();
        self.x = self.$rand(c.$display().$width()['$-'](self.image.$width()));
        return self.v = self.$rand(9)['$+'](4);
      };

      return (def.$act = function(c) {
        var self = this;

        self.y = self.y['$+'](self.v);
        if (self.y['$>'](c.$display().$height())) {
          return self.alive = false
          } else {
          return nil
        };
      }, nil) && 'act';
    })(self, (($a = $scope.Actor) == null ? $opal.cm('Actor') : $a));

    (function($base, $super) {
      function $Apple(){};
      var self = $Apple = $klass($base, $super, 'Apple', $Apple);

      var def = self._proto, $scope = self._scope;

      def.x = def.y = nil;
      $opal.defs(self, '$image', function() {
        var $a, $b, self = this;
        if (self.image == null) self.image = nil;

        return ((($a = self.image) !== false && $a !== nil) ? $a : self.image = (($b = $scope.Image) == null ? $opal.cm('Image') : $b)['$[]']("images/apple.png"));
      });

      $opal.defs(self, '$hit_sound', function() {
        var $a, $b, self = this;
        if (self.sound == null) self.sound = nil;

        return ((($a = self.sound) !== false && $a !== nil) ? $a : self.sound = (($b = $scope.Sound) == null ? $opal.cm('Sound') : $b)['$[]']("sounds/get.wav"));
      });

      return (def['$hit?'] = function(player) {
        var $a, self = this, xdiff = nil, ydiff = nil, distance = nil;

        xdiff = (self.x['$+'](38))['$-']((player.$x()['$+'](16)));
        ydiff = (self.y['$+'](48))['$-']((player.$y()['$+'](16)));
        distance = (($a = $scope.Math) == null ? $opal.cm('Math') : $a).$sqrt(xdiff['$**'](2)['$+'](ydiff['$**'](2)));
        return distance['$<'](((40)['$+'](16)));
      }, nil) && 'hit?';
    })(self, (($a = $scope.Item) == null ? $opal.cm('Item') : $a));

    (function($base, $super) {
      function $Bomb(){};
      var self = $Bomb = $klass($base, $super, 'Bomb', $Bomb);

      var def = self._proto, $scope = self._scope;

      def.x = def.y = nil;
      $opal.defs(self, '$image', function() {
        var $a, $b, self = this;
        if (self.image == null) self.image = nil;

        return ((($a = self.image) !== false && $a !== nil) ? $a : self.image = (($b = $scope.Image) == null ? $opal.cm('Image') : $b)['$[]']("images/bomb.png"));
      });

      $opal.defs(self, '$hit_sound', function() {
        var $a, $b, self = this;
        if (self.sound == null) self.sound = nil;

        return ((($a = self.sound) !== false && $a !== nil) ? $a : self.sound = (($b = $scope.Sound) == null ? $opal.cm('Sound') : $b)['$[]']("sounds/bom08.wav"));
      });

      return (def['$hit?'] = function(player) {
        var $a, self = this, xdiff = nil, ydiff = nil, distance = nil;

        xdiff = (self.x['$+'](36))['$-']((player.$x()['$+'](16)));
        ydiff = (self.y['$+'](54))['$-']((player.$y()['$+'](16)));
        distance = (($a = $scope.Math) == null ? $opal.cm('Math') : $a).$sqrt(xdiff['$**'](2)['$+'](ydiff['$**'](2)));
        return distance['$<'](((34)['$+'](8)));
      }, nil) && 'hit?';
    })(self, (($a = $scope.Item) == null ? $opal.cm('Item') : $a));

    def.$setup = function() {
      var $a, self = this;

      self.context = (($a = $scope.Context) == null ? $opal.cm('Context') : $a).$new(self.$display(), self.$keyboard());
      self.$display()['$size=']((($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](640, 480));
      self.high_score = 0;
      self.play_sound = false;
      return self.$reset_game();
    };

    def.$reset_game = function() {
      var $a, self = this;

      self.player = (($a = $scope.Player) == null ? $opal.cm('Player') : $a).$new(self.context);
      self.actors = [self.player];
      self.score = 0;
      return self.state = "playing";
    };

    return (def.$update = function(elapsed) {
      var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, self = this, item = nil;

      while (self.actors.$length()['$<'](6)) {
      item = (function() {if ((($b = (self.$rand(100)['$<'](80))) !== nil && (!$b._isBoolean || $b == true))) {
        return (($b = $scope.Bomb) == null ? $opal.cm('Bomb') : $b).$new(self.context)
        } else {
        return (($b = $scope.Apple) == null ? $opal.cm('Apple') : $b).$new(self.context)
      }; return nil; })();
      self.actors.$push(item);};
      if ((($a = self.$keyboard()['$pressed?']("enter")) !== nil && (!$a._isBoolean || $a == true))) {
        self.$reset_game()};
      if ((($a = self.$keyboard()['$pressed?']("s")) !== nil && (!$a._isBoolean || $a == true))) {
        self.play_sound = self.play_sound['$!']()};
      ($a = ($b = self.actors).$each, $a._p = (TMP_3 = function(x){var self = TMP_3._s || this, $a, $b, $c, $case = nil;
        if (self.context == null) self.context = nil;
        if (self.state == null) self.state = nil;
        if (self.player == null) self.player = nil;
        if (self.play_sound == null) self.play_sound = nil;
        if (self.score == null) self.score = nil;
        if (self.high_score == null) self.high_score = nil;
if (x == null) x = nil;
      x.$act(self.context);
        if ((($a = ($b = x['$is_a?']((($c = $scope.Item) == null ? $opal.cm('Item') : $c)), $b !== false && $b !== nil ?self.state['$==']("playing") : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          if ((($a = x['$hit?'](self.player)) !== nil && (!$a._isBoolean || $a == true))) {
            x['$alive='](false);
            if ((($a = self.play_sound) !== nil && (!$a._isBoolean || $a == true))) {
              x.$class().$hit_sound().$play()};
            return (function() {$case = x;if ((($a = $scope.Apple) == null ? $opal.cm('Apple') : $a)['$===']($case)) {return self.score = self.score['$+'](1)}else if ((($a = $scope.Bomb) == null ? $opal.cm('Bomb') : $a)['$===']($case)) {self.state = "gameover";
            self.player['$alive='](false);
            return self.high_score = [self.high_score, self.score].$max();}else { return nil }})();
            } else {
            return nil
          }
          } else {
          return nil
        };}, TMP_3._s = self, TMP_3), $a).call($b);
      ($a = ($c = self.actors).$delete_if, $a._p = (TMP_4 = function(x){var self = TMP_4._s || this;
if (x == null) x = nil;
      return x.$alive()['$!']()}, TMP_4._s = self, TMP_4), $a).call($c);
      self.$display().$clear();
      self.$display()['$fill_color=']((($a = $scope.C) == null ? $opal.cm('C') : $a)['$[]'](128, 255, 255));
      self.$display().$fill_rectangle((($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](0, 0), self.$display().$size());
      self.$display()['$fill_color=']((($a = $scope.C) == null ? $opal.cm('C') : $a)['$[]'](0, 128, 0));
      self.$display().$fill_rectangle((($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](0, 400), (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](640, 180));
      ($a = ($d = self.actors).$each, $a._p = (TMP_5 = function(x){var self = TMP_5._s || this;
        if (self.context == null) self.context = nil;
if (x == null) x = nil;
      return x.$render(self.context)}, TMP_5._s = self, TMP_5), $a).call($d);
      self.$display()['$fill_color=']((($a = $scope.C) == null ? $opal.cm('C') : $a)['$[]'](0, 0, 0));
      self.$display()['$text_size='](24);
      self.$display().$fill_text("SCORE: " + (self.score) + "  HIGHSCORE: " + (self.high_score), (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](0, 30));
      if (self.state['$==']("gameover")) {
        self.$display().$fill_text("GAME OVER (PRESS ENTER)", (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](0, 120))};
      self.$display()['$text_size='](12);
      self.$display()['$fill_color=']((($a = $scope.C) == null ? $opal.cm('C') : $a)['$[]'](255, 255, 255));
      return self.$display().$fill_text("[S] sound(" + (self.play_sound) + ")", (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](0, 480));
    }, nil) && 'update';
  })(self, (($a = $scope.Game) == null ? $opal.cm('Game') : $a));
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/game.js.map
;
